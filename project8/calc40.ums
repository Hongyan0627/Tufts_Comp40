// Comp40 Homework 8
// By: Josie Barth and Hongyan Wang
// April 23rd 2016

// Calling Convention
// r0 is always 0 (points to segment 0, used for goto and for the call stack) 
// r1 is the return-address register and the result register 
// r2 is the stack pointer and must have same value after return (nonvolatile) 
// r3, r4 are nonvolatiles
// r5 is a volatile register (often used to copy return address) 
// r6, r7 are volatile and are used as .temps 

########################################################
#       initialize jumptable
########################################################
.section init
        .temps r6, r7
        jumptable: // jump table "points" to the begining of the jumptable
                .space 256 //creates space for 256 ASCII chars


        // Initalize Jump Table
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        initialize_jumptable:
               
                push r3 on stack r2     // save nonvolatile register
                push r4 on stack r2
                r4 := jumptable         // start of the jumptable
                r3 := jumptable + 255   // the end of the jumptable
                goto jumptable_loop
        
        // loop to initialize all inputs of jumptable to "unknown character"
        // using r4 as i
        jumptable_loop:
                m[r0][r4] := input_error
                r4 := r4 + 1 using r6
                if (r4 <=s r3) goto jumptable_loop using r5
                
                pop r4 off stack r2     // restore nonvolatile register
                pop r3 off stack r2

.section text
        // assumes that the value stack is the first parameter (on top of
        // callstack) and the user's input is the second parameter on
        // the callstack
        // stores the value stack in r1 and returns
        input_error:
                push r1 on stack r2
                push r4 on stack r2 // save nonvolatile register
                
                r1 := m[r0][r2 + 2] // r1 has value stack
                r4 := m[r0][r2 + 3] // access the user's input
                output "Unknown character '"
                output r4
                output "'\n"
                pop r4 off stack r2 // restore nonvolatile register
                pop r5 off stack r2
                goto r5

#######################################################################
#       set digit in jumptable
#######################################################################
.section init
        write_digits:
        
                // overwrites digit entries of jumptable 
                m[r0][jumptable + '0'] := digit
                m[r0][jumptable + '1'] := digit
                m[r0][jumptable + '2'] := digit
                m[r0][jumptable + '3'] := digit
                m[r0][jumptable + '4'] := digit
                m[r0][jumptable + '5'] := digit       
                m[r0][jumptable + '6'] := digit
                m[r0][jumptable + '7'] := digit
                m[r0][jumptable + '8'] := digit
                m[r0][jumptable + '9'] := digit
                 
.section text
        
        // Adds digit to value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes three parameters are on the callstack
        // 1) value_stack and 2) the value (digit) itself
        // 3) the state of waiting (0) or entering (1)
        // returns value stack in r1
        digit:
                push r1 on stack r2 // save the return address
                push r3 on stack r2 // save nonvolatile register 
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                r3 := m[r0][r2 + 3] // now r3 holds the value we want to store
                r5 := m[r0][r2 + 4] // now r5 holds the waiting or entering
                                    // state
               
                r3 := r3 - '0'      // save value of digit not decimal
                push r3 on stack r1 // push digit onto value_stack
                
                if (r5 == 0) goto before_entering
                
                pop r3 off stack r1
                pop r4 off stack r1
                r4 := r4 * 10       // multiply previous value by 10
                r4 := r4 + r3       // add new digit to the 1's place
                push r4 on stack r1
                goto before_entering
                        
        before_entering:
                pop r3 off stack r2 // save the return address
                pop r5 off stack r2 // save nonvolatile register       
                
                pop stack r2 // pop old value stack
                pop stack r2 // pop old user's digit
                pop stack r2 // off old waiting/entering state
               
                pop r4 off stack r2 // restore nonvolatile register
                pop r3 off stack r2 // restore nonvolatile register
                pop r5 off stack r2 
                pop stack r2        // remove old valuestack 
                
                push r1 on stack r2 // save new value stack on callstack
                
                goto entering

########################################################################
#       set space
########################################################################
.section init

        m[r0][jumptable + ' '] := space
        
.section text

        // Saves the value stack in r1 
        // and returns
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        space:
                push r1 on stack r2
                
                r1 := m[r0][r2 + 1] // now r1 holds value_stack
                
                pop r5 off stack r2
                goto r5 // goto the return address

########################################################################
#       set newline
########################################################################
.section init
        
        m[r0][jumptable + '\n'] := new_line

############################################################################
#       set '+'
############################################################################
.section init     
        m[r0][jumptable + '+'] := add
        
.section text

        // Adds two digits, pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        add:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x
              
                r3 := r3 + r5       // r3 = x + y

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '-'
############################################################################
.section init     
        m[r0][jumptable + '-'] := sub
        
.section text

        // Subtracts two digits, pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        sub:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x
              
                r3 := r3 - r5       // r3 = x - y

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '*'
############################################################################
.section init     
        m[r0][jumptable + '*'] := mult
        
.section text

        // Multiplies two digits, pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        mult:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x
              
                r3 := r3 * r5       // r3 = x * y

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '|'
############################################################################
.section init     
        m[r0][jumptable + '|'] := bitwise_or
        
.section text

        // Preforms a bitwise "or" operation on two digits, 
        // pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        bitwise_or:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x
              
                r3 := r3 | r5       // r3 = x | y

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '&'
############################################################################
.section init     
        m[r0][jumptable + '&'] := bitwise_and
        
.section text

        // Preforms a bitwise "and" operation on two digits, 
        // pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        bitwise_and:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x
              
                r3 := r3 & r5       // r3 = x & y

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set 's': swap two values
############################################################################
.section init     
        m[r0][jumptable + 's'] := swap
        
.section text

        // Swap two values on top of value stack (exchange x and y), 
        // pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        swap:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
                
                pop r5 off stack r1 // r5 is y
                pop r3 off stack r1 // r3 is x

                push r5 on stack r1 // push y 
                push r3 on stack r1 // push x
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set 'c': change sign
############################################################################
.section init     
        m[r0][jumptable + 'c'] := change_sign
        
.section text

        // Changes sign of a value x to -x, 
        // pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        change_sign:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check1 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
               
                pop r3 off stack r1 // r3 is x
              
                r3 := -r3           // r3 = -x

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '~':bit complement
############################################################################
.section init     
        m[r0][jumptable + '~'] := bitwise_compl
        
.section text

        // Preforms a bitwise complement operation on value x to ~x 
        // pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        bitwise_compl:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check1 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
               
                pop r3 off stack r1 // r3 is x
              
                r3 := ~r3           // r3 = ~x

                push r3 on stack r1 // push result on value stack
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set 'd': duplicate value
############################################################################
.section init     
        m[r0][jumptable + 'd'] := duplicate
        
.section text

        // Duplicates the value on the top of the stack 
        // pushes duplicate on top of value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        duplicate:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check1 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
               
                pop r3 off stack r1 // r3 is x
             
                push r3 on stack r1 // push result on value stack
                push r3 on stack r1 // push result on value stack again
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set 'p':pop value from stack, then discard the value
############################################################################
.section init     
        m[r0][jumptable + 'p'] := discard
        
.section text

        // Pops value off value stack and discards it
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        discard:
                push r1 on stack r2
                push r3 on stack r2
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check1 linking r1
                
                pop r1 off stack r2 // re-assigns value to stack r1
               
                pop r3 off stack r1 // r3 is x, don't do anything with it
                
                pop r3 off stack r2 // restore non volatile resifter
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set 'z': zero stack
############################################################################
.section init     
        m[r0][jumptable + 'z'] := remove_all
        
.section text

        // Removes all values from the value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        remove_all:
                push r1 on stack r2
                push r3 on stack r2
                push r4 on stack r2
                
                r4 := m[r0][r2 + 3] // now r4 holds value_stack
                
                r5 := endvalue_stack - r4 // now r5 is the number of values in
                                          // the value stack
               
                if (r5 != 0) goto remove_loop
                
                r1 := r4 // save new value stack in return address
                
                pop r4 off stack r2 // restore non volatile register
                pop r3 off stack r2 // restore non volatile register
                pop r5 off stack r2 // get return address
                goto r5 // return
        
        // assumes r5 holds the number of values in value stack and
        // the value stack is stored in register r4
        remove_loop:
                pop stack r4 // remove a value
                r5 := r5 - 1 // decrement the number of values on valuestack
                if (r5 != 0) goto remove_loop // repeat is number of values != 0
               
                r1 := r4 // save new value stack in return address
                
                pop r4 off stack r2 // restore non volatile register
                pop r3 off stack r2 // restore non volatile register
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       set '/'
############################################################################
.section init
       m[r0][jumptable + '/'] := div
.section text

        // Divides two values and pushes result on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the top of callstack
        // returns value stack in r1
        div:
                push r1 on stack r2 // save return address
                push r3 on stack r2 // save nonvolatile register
                
                r1 := m[r0][r2 + 2] // now r1 holds value_stack
                
                push r1 on stack r2 // push value stack as parameter 
                                    // for check2 
                goto check2 linking r1
                pop r1 off stack r2 // re-assigns value to stack r1
                
                push r4 on stack r2 // save nonvolatile register
                
                pop r4 off stack r1 // r4 is y
                pop r3 off stack r1 // r3 is x
              
                
                if (r4 == 0) goto divide_zero_error

                if (r3 <s 0) goto negative_x using r5

                if (r4 <s 0) goto positive_x_negative_y using r5

                r4 := r3 / r4      // x and y must both be positive
                push r4 on stack r1
                goto div_return

        divide_zero_error:
                output "Division by zero\n"
                push r3 on stack r1 // push x
                push r4 on stack r1 // push y
                goto div_return
                        
        negative_x:
                if (r4 >s 0) goto negative_x_positive_y using r5
                r3 := -r3  // change neg x to pos x
                r4 := -r4  // change neg y to pos y
                r4 := r3 / r4 // pos x / pos y
                push r4 on stack r1 // push result on value stack
                goto div_return
                
        negative_x_positive_y:
                r3 := -r3       // change neg x to pos x
                r4 := r3 / r4   // r4 = pos x / pos y
                r4 := -r4       // r4 = neg (pos x / pos y)
                push r4 on stack r1 // push result on value stack 
                goto div_return
                
        positive_x_negative_y:
                r4 := -r4       // change neg y to pos y
                r4 := r3 / r4   // pos x / pos y
                r4 := -r4       // neg (pos x / pos y)
                push r4 on stack r1  // push result on value stack
                goto div_return  
                
        div_return:
                pop r4 off stack r2 // restore nonvolatile register
                pop r3 off stack r2 // restore non volatile register
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       helper functions to check stack underflow
############################################################################
.section text
        // Checks for 1 value on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        check1:
                r5 := m[r0][r2] //r1 now hold the value stack
                
                r5 := endvalue_stack - r5 // now r5 is the number of values in 
                                          // the value stack 
                if (r5 >=s 1) goto r1 using r5 
                goto error1 
        
        // Checks for 2 values on value stack
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes one parameter - the value stack is on the callstack
        // returns value stack in r1
        check2:
                r5 := m[r0][r2] //r1 now hold the value stack
                
                r5 := endvalue_stack - r5 // now r5 is the number of values in 
                                          // the value stack 
                if (r5 >=s 2) goto r1 using r5 
                goto error2 
             
        error1:
                output "Stack underflow---expected at least 1 element\n"
                pop r1 off stack r2 // re-assigns value to stack r1
                pop r3 off stack r2 // restore nonvolatile register
                pop r5 off stack r2 // get return address
                goto r5 // return
        error2:
                output "Stack underflow---expected at least 2 elements\n"
                pop r1 off stack r2 // re-assigns value to stack r1
                pop r3 off stack r2 // restore nonvolatile register
                pop r5 off stack r2 // get return address
                goto r5 // return

############################################################################
#       waiting and entering states
############################################################################
.section text

        // invariant: assumes the value_stack is the first parameter 
        // on the top of the callstack
        waiting:
                push r1 on stack r2 // save return address
                push r3 on stack r2 // save nonvolatile register
                push r4 on stack r2 // save non volatile register
                
                r3 := 0
                push r3 on stack r2 // pushes 0 for waiting state
                
                r1 := input()
                goto waiting_with_character
       
        entering:
                push r1 on stack r2 // save return address
                push r3 on stack r2 // save nonvolatile register
                push r4 on stack r2 // save non volatile register
               
                r3 := 1
                push r3 on stack r2 // pushes 1 for entering state
                
                r1 := input()               
                goto waiting_with_character
        
        // invariant: expects parameter is in r1
        waiting_with_character:
             
                r5 := ~r1 // tests for EOF
                r3 := exit_program // if EOF, will jump to end of program
                
                r4 := jumptable + r1 // branch indirect through jumptable
                
                if (r5 != 0) r3 := m[r0][r4] // sets r3 to corresponding label
                                             // in jumptable if not EOF        
               
                r4 := m[r0][r2 + 4] //contains value stack
                push r1 on stack r2 // push user's input value
                push r4 on stack r2 // push the value stack
                
                // assumes the updated valuestack is saved in r1 for all calls
                goto r3 linking r1
                
                pop stack r2 // pop old value stack off callstack
                pop stack r2 // pop off old user's input
                pop stack r2 // off old waiting/entering state
               
                pop r4 off stack r2 // restore nonvolatile register
                pop r3 off stack r2 // restore nonvolatile register
                pop r5 off stack r2 
                pop stack r2        // remove old valuestack 
                
                push r1 on stack r2 // save new value stack on callstack
                
                goto waiting

############################################################################
#       main program
############################################################################
.section text
        main:
                push r1 on stack r2     // save the return address
                push r4 on stack r2     // save nonvolatile register
                
                r4 := endvalue_stack       
                push r4 on stack r2     // passes value_stack as parameter to
                                        //waiting
                goto waiting linking r1
                pop stack r2            // get rid of old parameter
                
                pop r4 off stack r2     // restore nonvolatile register
                pop r5 off stack r2     // restore nonvolatile register
                r1 := 0                 // exit SUCCESS
                goto r5                 // return
                
############################################################################
#       exit program
############################################################################    
.section text

        exit_program:
                halt