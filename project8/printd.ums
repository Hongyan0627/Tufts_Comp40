// Comp40 Homework 8
// By: Josie Barth and Hongyan Wang
// April 23rd 2016

// Calling Convention
// r0 is always 0 (points to segment 0, used for goto and for the call stack) 
// r1 is the return-address register and the result register 
// r2 is the stack pointer and must have same value after return (nonvolatile) 
// r3, r4 are nonvolatiles
// r5 is a volatile register (often used to copy return address) 
// r6, r7 are volatile and are used as .temps 

########################################################################
#       set newline
########################################################################

.section init
        .temps r6, r7
        r0 := 0
        .zero r0
        
.section text
        // Prints value stack following a newline command
        // stack pointer in r2
        // registers r3, r4 are nonvolitile
        // r0 is zero
        // assumes two parameters are on the callstack
        // 1) value_stack and 2) the user's input (the newline)
        // returns value_stack in r1
        new_line:
                push r1 on stack r2     // save return address
                push r3 on stack r2     // save nonvolatile register
                push r4 on stack r2     // save nonvolatile register

                r3 := m[r0][r2 + 3]     // now r3 points to the value_stack
                goto print_loop

        print_loop:
                if (r3 == endvalue_stack) goto print_end using r5
                r4 := m[r0][r3] // r4 contains the value we want to print
              
                push r4 on stack r2 // the value we want to print is pushed
                                    // as the first parameter
                goto print_value_start linking r1
                
                pop stack r2        // pop parameter off callstack 

                r3 := r3 + 1        // increment to get next value on the
                                    // value_stack
                goto print_loop

        print_end:
                r1 := m[r0][r2 + 3]     // now r1 points to value_stack
                                        // as return value
                pop r4 off stack r2     // restore nonvolatile register
                pop r3 off stack r2     // restore nonvolatile register
                pop r5 off stack r2     // get return address
                goto r5                 // return

#######################################################################
#       print module
#######################################################################
.section text

        // assumes that the value to be printed is the first parameter 
        // on the top of the call stack
        print_value_start:
        
                push r1 on stack r2  // save return address
                push r3 on stack r2  // save non volatile register
                push r4 on stack r2  // save non volatile register

                output ">>> "

                r4 := m[r0][r2 + 3] // now r4 holds value to be printed

                r3 := 0             // keeps track of number of digits to be
                                    // printed for an individual value
                
                if (r4 == 0) goto print_zero
                if (r4 <s 0) goto print_negative using r5 
                goto print_positive_value

        print_zero:
                output "0"
                goto print_value_exit

        print_negative:
                output '-'
                r4 := -r4       // now the value is positive
                goto print_positive_value

        print_positive_value:
                r3 := r3 + 1   // keeps track of number of digits to be printed
                r5 := r4       // r5 temporarily stores r4

                r4 := r4 / 10  // stores all of digits except last in r4
                
                // if r4 was a single digit, then exit loop and print the digit
                if (r4 == 0) goto print_digit_start 
                
                // if r4 was not a single digit, push the least significant
                // digit on call stack
                r5 := r5 mod 10  
                push r5 on stack r2  

                goto print_positive_value
        
        // assumes the most significant digit is in r5
        // assumes digits thereafter are on the callstack
        // in order by second most significant digit to
        // least significant digit
        print_digit_start:

                push r5 on stack r2 // pushes the most significant value on
                                    // call stack
                goto print_digit_loop

        // assumes all digits of value on one the callstack
        // with the most significant digit on the top 
        // and the rest of the digits ordered by significance 
        // thereafter
        print_digit_loop:
                if (r3 == 0) goto print_value_exit
                pop r4 off stack r2     // get the digit
                output r4 + '0'         // offset in ASCII
                r3 := r3 - 1            // decrement # of digits
                goto print_digit_loop

        print_value_exit:
                output '\n'
                pop r4 off stack r2     // restore nonvolatile register
                pop r3 off stack r2     // restore nonvolatile register
                pop r5 off stack r2     // get return address
                goto r5                 // return
