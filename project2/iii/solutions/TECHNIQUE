######################################################################
Interfaces, Implementations, and Images
Technique
Purpose: To describe a coding technique we have started to use in 
COMP 40
By: Derick Yang and Hongyan Wang
Date: February 16, 2016
######################################################################

## The importance of testing ##

During the first two assignments of COMP40, we began to understand the
importance of testing our implementations in small pieces. We have
always heard about it, but up until COMP40, we did not fully 
understand the extent to which we should test our programs.

There are two important things to keep in mind with tests: the size of
the block of code you want to test, and the number of potential edge 
cases that could potentially result in errors. We need to consider 
every form of bogus input, as user error is common and should be 
expected. Therefore, we must be able to handle a user's input, even if
it happens to be nonexistent filenames, the wrong format, giant files,
or empty files.

In COMP40, we design the tests before we start designing the interface
and implementation of our project. Testing plans help us think about 
how to design our code. For example, before we started to design our 
UArray2 and Bit2, we made testing plans for edge cases including NULL 
pointers, index-out-of-bounds, empty inputs, and so on. When we write 
code for implementations of UArray2 and Bit2, we are very careful to 
deal with edge cases.

During COMP11 and COMP15, we were told to test our code in small 
pieces so that we can catch the errors in the lines that we write. 
Since starting COMP40, this bit of advice has been extremely helpful. 
If we try to test large portions of code, we often have to resort to 
print messages in order to find issues, and it can sometimes be 
frustrating to track down bugs. We compile whenever we have completed
a digestible chunk of code (usually 4-5 lines) so that we can 
easily track down errors and bugs.

Even as we have started to do more testing, there are still ways in
which we can improve the quality of our testing process. For example,
we should build test mains to test specific member functions in each
of our files. We should save these tests throughout the development 
process, so that we always have a chunk of code that we know works. 
We can hard code input data to test certain inputs. There are many 
ways we can still work to improve the quality of our tests.

While working through the first two projects, we started to realize 
the importance of testing our code frequently in small pieces. Both
of us hopes to continue to do this as we work through our COMP40 
projects, while at the same time breaking up our testing process to 
account for even smaller chunks of projects.
