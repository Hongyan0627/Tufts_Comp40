######################################################################
Interfaces, Implementations, and Images
README
By: Derick Yang and Hongyan Wang
Date: February 16, 2016
######################################################################

Help we received: TA's (Theodore, Rachel, Charlie, Aditya), Hanson's 
book, Piazza.

We believe everything has been correctly implemented

We spent approximately 20 hours on this assignment.
######################################################################

                        PART 1: UArray2 Design

######################################################################
1. We design an interface to represent an unboxed two dimensional 
array of polymorphic objects.
----------------------------------------------------------------------
2. Functions we will offer:
* T UArray2_new(int width, int height, int size) returns a new
    UArray2, allocated on the heap, initialized with the given width,
    height, and size of each element. Note that the UArray2 is unboxed, 
    and is initialized to contain zeros in all allocated bits. There 
    should be a Checked runtime error when space cannot be allocated.
    It is a CRE if the_array is NULL.

* void UArray2_map_col_major(T the_array, 
    void apply(int col, int row, T a, void *curr_val, void *ok), 
    bool *ok)
    This function maps apply() to all elements in the array,
    using the col major order. It is a CRE if the_array is NULL.

* void UArray2_map_row_major(T the_array, 
    void apply(int col, int row, T a, void *curr_val, void *ok), 
    bool *ok);
    This function maps apply() to all elements in the array,
    using the row major order. It is a CRE if the_array is NULL

* void *UArray2_at(T the_array, int col, int row)
    This function returns a pointer to the value at the given 
    indices. It is a CRE to access indices outside the 2D array, 
    or if the_array is NULL.

* int UArray2_width(T the_array)
    This function returns the width of the array. It is a CRE if
    the_array is NULL.

* int UArray2_height(T the_array)
    This function returns the height of the array. It is a CRE if
    the_array is NULL.

* int UArray2_size(T the_array)
    This function returns the size of each element in the array.
    It is a CRE if the_array is NULL.

* void UArray2_free(T *the_array)
    This function frees allocated space in the array.
----------------------------------------------------------------------
4. Representations and Invariants:
* We will use the one dimensional array interface that Hanson and 
    Ramsey provides us. Though the array we implement will be one
    dimensional, we will utilize the formula (given a row and col): 
    index = col + row * width
    in order to access the correct elements in the array.
* Invariants:
    * The length of our 1-dimensional array should never exceed 
    width * height. Furthermore, the size of our array should not 
    change.
    * The size of the return value of UArray_at() (which is an element
    in the array) should be equal to the return value of 
    UArray2_size() (which returns the size of one element in the 
    array)
    * The elements in our array should be homogeneous.
######################################################################


######################################################################

                        PART 2: Bit2 Design

######################################################################
1. We design an interface to represent a 2 dimensional array of bits.
----------------------------------------------------------------------
2. Functions we will offer:
* T Bit2_new(int width, int height);
    Bit2_new returns a new Bit2 array

* void Bit2_map_col_major(T the_array, 
    void apply(int col, int row, T a, int curr_val, void *ok), 
    bool *ok);
    This function maps apply() to all elements in the array,
    using the col major order

* void Bit2_map_row_major(T the_array, 
    void apply(int col, int row, T a, int curr_val, void *ok), 
    bool *ok);
    This function maps apply() to all elements in the array,
    using the row major order

* int Bit2_put(T the_array, int col, int row, int marker);
    This function replaces the marker at the given pair of indicesto
    the marker. Returns the previous value at that index

* int Bit2_get(T the_array, int col, int row);
    This function returns the value of the map at the 
    given pair of indices

* int Bit2_width(T the_array);
This function returns the width of the array

* int Bit2_height(T the_array);
This function returns the height of the array

* void Bit2_free(T *the_array);
This function frees allocated space in the array
----------------------------------------------------------------------
4. Representations and Invariants:
* We will use the one dimensional array interface that Hanson and 
    Ramsey provides us. Though the array we implement will be one
    dimensional, we will utilize the formula (given a row and col): 
    index = col + row * width
    in order to access the correct elements in the array.
* Invariants:
    * The length of our 1-dimensional array should never exceed 
    width * height. Also, the size of our array should not change.
    * Bit2_put(the_array, col, row, a) 
      Bit2_get(the_array, col, row) == a.
    * The value at any index in our 2D array should only ever be 0 or
    1
######################################################################
